{"version":3,"file":"AudioWorker-C9w2WVtH.js","sources":["../lib/TypedQueue.js","../lib/Kali.js","../scripts/Workers/AudioWorker.js"],"sourcesContent":["/* FIFO Queue\r\n * Copyright (c) 2015 Vivek Panyam\r\n *\r\n * Based on fifo.h from SoX (copyright 2007 robs@users.sourceforge.net)\r\n *\r\n * This library is free software; you can redistribute it and/or modify it\r\n * under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation; either version 2.1 of the License, or (at\r\n * your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but\r\n * WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser\r\n * General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with this library; if not, write to the Free Software Foundation,\r\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n */\r\n// Queue using typed arrays\r\nvar TypedQueue = /** @class */ (function () {\r\n    function TypedQueue(c) {\r\n        this.begin = 0; // index of first item in mem\r\n        this.end = 0; // 1 + index of last item in mem\r\n        this.typedArrayConstructor = c;\r\n        this.buffer = new c(16384);\r\n    }\r\n    TypedQueue.prototype.clear = function () {\r\n        this.begin = this.end = 0;\r\n    };\r\n    TypedQueue.prototype.reserve = function (n) {\r\n        if (this.begin == this.end) {\r\n            this.clear();\r\n        }\r\n        while (1) {\r\n            // If we can fit the additional data, do it\r\n            if (this.end + n < this.buffer.length) {\r\n                var idx = this.end;\r\n                this.end += n;\r\n                return idx;\r\n            }\r\n            // Shift to beginning of array\r\n            if (this.begin > 16384) {\r\n                this.buffer.set(this.buffer.subarray(this.begin, this.end));\r\n                this.end -= this.begin;\r\n                this.begin = 0;\r\n                continue;\r\n            }\r\n            // Resize array if nothing else works\r\n            var newbuf = new this.typedArrayConstructor(this.buffer.length + n);\r\n            newbuf.set(this.buffer);\r\n            this.buffer = newbuf;\r\n        }\r\n    };\r\n    TypedQueue.prototype.write = function (data, n) {\r\n        var offset = this.reserve(n);\r\n        this.buffer.set(data.subarray(0, n), offset);\r\n    };\r\n    TypedQueue.prototype.write_ptr = function (n) {\r\n        var offset = this.reserve(n);\r\n        return this.buffer.subarray(offset, offset + n);\r\n    };\r\n    TypedQueue.prototype.read = function (data, n) {\r\n        if (n + this.begin > this.end) {\r\n            console.error(\"Read out of bounds\", n, this.end, this.begin);\r\n        }\r\n        if (data != null) {\r\n            data.set(this.buffer.subarray(this.begin, this.begin + n));\r\n        }\r\n        this.begin += n;\r\n    };\r\n    TypedQueue.prototype.read_ptr = function (start, end) {\r\n        if (end === void 0) { end = -1; }\r\n        if (end > this.occupancy()) {\r\n            console.error(\"Read Pointer out of bounds\", end);\r\n        }\r\n        if (end < 0) {\r\n            end = this.occupancy();\r\n        }\r\n        return this.buffer.subarray(this.begin + start, this.begin + end);\r\n    };\r\n    TypedQueue.prototype.occupancy = function () {\r\n        return this.end - this.begin;\r\n    };\r\n    return TypedQueue;\r\n}());\r\nexport default TypedQueue;\r\n","/* Time stretching and pitch shifting in javascript\r\n * Copyright (c) 2015 Vivek Panyam\r\n *\r\n * Based on tempo.c from SoX (copyright 2007 robs@users.sourceforge.net)\r\n *\r\n * This library is free software; you can redistribute it and/or modify it\r\n * under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation; either version 2.1 of the License, or (at\r\n * your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but\r\n * WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser\r\n * General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with this library; if not, write to the Free Software Foundation,\r\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n */\r\nimport TypedQueue from \"./TypedQueue\";\r\n// The c code used implicit conversion between floats and ints.\r\n// Since JS stores everything as floats, we need to manually truncate when we\r\n// set a float to an int. A good way to find all these spots is to use the \r\n// `-Wconversion` flag when compiling the c code.\r\nfunction handleInt(i) {\r\n    return Math.floor(i);\r\n}\r\nvar tempo_t = /** @class */ (function () {\r\n    function tempo_t() {\r\n        this.is_initialized = false;\r\n        this.sample_rate = 44100;\r\n        this.channels = 0;\r\n        this.quick_search = false;\r\n        this.factor = 0;\r\n        this.search = 0;\r\n        this.segment = 0;\r\n        this.overlap = 0;\r\n        this.process_size = 0;\r\n        /* Counters */\r\n        this.samples_in = 0;\r\n        this.samples_out = 0;\r\n        this.segments_total = 0;\r\n        this.skip_total = 0;\r\n    }\r\n    return tempo_t;\r\n}());\r\nvar Kali = /** @class */ (function () {\r\n    function Kali(channels) {\r\n        var t = new tempo_t();\r\n        t.channels = channels;\r\n        t.input_fifo = new TypedQueue(Float32Array);\r\n        t.output_fifo = new TypedQueue(Float32Array);\r\n        this.t = t;\r\n    }\r\n    /* Waveform Similarity by least squares; works across multi-channels */\r\n    // TODO: Optimize by caching?\r\n    Kali.prototype.difference = function (a, b, length) {\r\n        var diff = 0;\r\n        var i = 0;\r\n        for (var i = 0; i < length; i++) {\r\n            diff += Math.pow(a[i] - b[i], 2);\r\n        }\r\n        return diff;\r\n    };\r\n    /* Find where the two segments are most alike over the overlap period. */\r\n    Kali.prototype.tempo_best_overlap_position = function (t, new_win) {\r\n        var f = t.overlap_buf;\r\n        var j;\r\n        var best_pos;\r\n        // NOTE: changed to zero-fill shift\r\n        var prev_best_pos = (t.search + 1) >>> 1;\r\n        var step = 64;\r\n        var i = best_pos = t.quick_search ? prev_best_pos : 0;\r\n        var diff;\r\n        var least_diff = this.difference(new_win.subarray(t.channels * i), f, t.channels * t.overlap);\r\n        var k = 0;\r\n        // TODO: implement new quickseek algorithm from SoundTouch\r\n        if (t.quick_search) {\r\n            do { // hierarchial search\r\n                for (k = -1; k <= 1; k += 2) {\r\n                    for (j = 1; j < 4 || step == 64; j++) {\r\n                        i = prev_best_pos + k * j * step;\r\n                        if (i < 0 || i >= t.search) {\r\n                            break;\r\n                        }\r\n                        diff = this.difference(new_win.subarray(t.channels * i), f, t.channels * t.overlap);\r\n                        if (diff < least_diff) {\r\n                            least_diff = diff;\r\n                            best_pos = i;\r\n                        }\r\n                    }\r\n                }\r\n                prev_best_pos = best_pos;\r\n            } while (step >>>= 2); // NOTE: changed to zero-fill shift\r\n        }\r\n        else {\r\n            for (i = 1; i < t.search; i++) { // linear search\r\n                diff = this.difference(new_win.subarray(t.channels * i), f, t.channels * t.overlap);\r\n                if (diff < least_diff) {\r\n                    least_diff = diff;\r\n                    best_pos = i;\r\n                }\r\n            }\r\n        }\r\n        return best_pos;\r\n    };\r\n    Kali.prototype.tempo_overlap = function (t, in1, in2, output) {\r\n        var i = 0;\r\n        var j = 0;\r\n        var k = 0;\r\n        var fade_step = 1.0 / t.overlap;\r\n        for (i = 0; i < t.overlap; i++) {\r\n            var fade_in = fade_step * i;\r\n            var fade_out = 1.0 - fade_in;\r\n            for (j = 0; j < t.channels; j++, k++) {\r\n                output[k] = in1[k] * fade_out + in2[k] * fade_in;\r\n            }\r\n        }\r\n    };\r\n    Kali.prototype.process = function () {\r\n        var t = this.t;\r\n        while (t.input_fifo.occupancy() >= t.process_size) {\r\n            var skip;\r\n            var offset;\r\n            /* Copy or overlap the first bit to the output */\r\n            if (!t.segments_total) {\r\n                offset = t.search / 2;\r\n                t.output_fifo.write(t.input_fifo.read_ptr(t.channels * offset, t.overlap), t.overlap);\r\n            }\r\n            else {\r\n                offset = this.tempo_best_overlap_position(t, t.input_fifo.read_ptr(0));\r\n                this.tempo_overlap(t, t.overlap_buf, t.input_fifo.read_ptr(t.channels * offset), t.output_fifo.write_ptr(t.overlap));\r\n            }\r\n            /* Copy the middle bit to the output */\r\n            t.output_fifo.write(t.input_fifo.read_ptr(t.channels * (offset + t.overlap)), t.segment - 2 * t.overlap);\r\n            /* Copy the end bit to overlap_buf ready to be mixed with\r\n             * the beginning of the next segment. */\r\n            var numToCopy = t.channels * t.overlap;\r\n            t.overlap_buf.set(t.input_fifo.read_ptr(t.channels * (offset + t.segment - t.overlap)).subarray(0, numToCopy));\r\n            /* Advance through the input stream */\r\n            t.segments_total++;\r\n            skip = handleInt(t.factor * (t.segment - t.overlap) + 0.5);\r\n            t.input_fifo.read(null, skip);\r\n        }\r\n    };\r\n    Kali.prototype.input = function (samples, n, offset) {\r\n        if (n === void 0) { n = null; }\r\n        if (offset === void 0) { offset = 0; }\r\n        if (n == null) {\r\n            n = samples.length;\r\n        }\r\n        var t = this.t;\r\n        t.samples_in += n;\r\n        t.input_fifo.write(samples, n);\r\n    };\r\n    Kali.prototype.output = function (samples) {\r\n        var t = this.t;\r\n        var n = Math.min(samples.length, t.output_fifo.occupancy());\r\n        t.samples_out += n;\r\n        t.output_fifo.read(samples, n);\r\n        return n;\r\n    };\r\n    Kali.prototype.flush = function () {\r\n        var t = this.t;\r\n        var samples_out = handleInt(t.samples_in / t.factor + 0.5);\r\n        var remaining = samples_out > t.samples_out ? (samples_out - t.samples_out) : 0;\r\n        var buff = new Float32Array(128 * t.channels);\r\n        if (remaining > 0) {\r\n            while (t.output_fifo.occupancy() < remaining) {\r\n                this.input(buff, 128);\r\n                this.process();\r\n            }\r\n            // TODO: trim buffer here\r\n            // Otherwise potential bug if we reuse after a flush\r\n            t.samples_in = 0;\r\n        }\r\n    };\r\n    Kali.prototype.setup = function (sample_rate, factor, // Factor to change tempo by\r\n    quick_search, segment_ms, search_ms, overlap_ms) {\r\n        if (quick_search === void 0) { quick_search = false; }\r\n        if (segment_ms === void 0) { segment_ms = null; }\r\n        if (search_ms === void 0) { search_ms = null; }\r\n        if (overlap_ms === void 0) { overlap_ms = null; }\r\n        var profile = 1;\r\n        var t = this.t;\r\n        t.sample_rate = sample_rate;\r\n        if (segment_ms == null) {\r\n            segment_ms = Math.max(10, Kali.segments_ms[profile] / Math.max(Math.pow(factor, Kali.segments_pow[profile]), 1));\r\n        }\r\n        if (search_ms == null) {\r\n            search_ms = segment_ms / Kali.searches_div[profile];\r\n        }\r\n        if (overlap_ms == null) {\r\n            overlap_ms = segment_ms / Kali.overlaps_div[profile];\r\n        }\r\n        var max_skip;\r\n        t.quick_search = quick_search;\r\n        t.factor = factor;\r\n        t.segment = handleInt(sample_rate * segment_ms / 1000 + .5);\r\n        t.search = handleInt(sample_rate * search_ms / 1000 + .5);\r\n        t.overlap = Math.max(handleInt(sample_rate * overlap_ms / 1000 + 4.5), 16);\r\n        if (t.overlap * 2 > t.segment) {\r\n            t.overlap -= 8;\r\n        }\r\n        if (!t.is_initialized) {\r\n            t.overlap_buf = new Float32Array(t.overlap * t.channels);\r\n        }\r\n        else {\r\n            var new_overlap = new Float32Array(t.overlap * t.channels);\r\n            var start = 0;\r\n            if (t.overlap * t.channels < t.overlap_buf.length) {\r\n                start = t.overlap_buf.length - (t.overlap * t.channels);\r\n            }\r\n            new_overlap.set(t.overlap_buf.subarray(start, t.overlap_buf.length));\r\n            t.overlap_buf = new_overlap;\r\n        }\r\n        max_skip = handleInt(Math.ceil(factor * (t.segment - t.overlap)));\r\n        t.process_size = Math.max(max_skip + t.overlap, t.segment) + t.search;\r\n        if (!t.is_initialized) {\r\n            t.input_fifo.reserve(handleInt(t.search / 2));\r\n        }\r\n        t.is_initialized = true;\r\n    };\r\n    Kali.prototype.setTempo = function (factor) {\r\n        var t = this.t;\r\n        this.setup(t.sample_rate, factor, t.quick_search);\r\n    };\r\n    Kali.segments_ms = [82, 82, 35, 20];\r\n    Kali.segments_pow = [0, 1, .33, 1];\r\n    Kali.overlaps_div = [6.833, 7, 2.5, 2];\r\n    Kali.searches_div = [5.587, 6, 2.14, 2];\r\n    return Kali;\r\n}());\r\n// if (window) {\r\n//     window['Kali'] = Kali;\r\n// }\r\nexport default Kali;\r\n","import Kali from \"../../lib/Kali\";\r\nfunction doStretch(inputData, stretchFactor, rate, numChannels = 1) {\r\n\tvar numInputFrames = inputData.length / numChannels;\r\n\tvar bufsize = 4096 * numChannels;\r\n\r\n\t// Create a Kali instance and initialize it\r\n\tvar kali = new Kali(numChannels);\r\n\tkali.setup(rate, stretchFactor, false);\r\n\r\n\t// Create an array for the stretched output\r\n\tvar completed = new Float32Array(\r\n\t\tMath.floor((numInputFrames / stretchFactor) * numChannels + 1),\r\n\t);\r\n\r\n\tvar inputOffset = 0;\r\n\tvar completedOffset = 0;\r\n\tvar loopCount = 0;\r\n\tvar flushed = false;\r\n\r\n\twhile (completedOffset < completed.length) {\r\n\t\t// if (loopCount % 100 == 0) {\r\n\t\t// \tconsole.log(\"Stretching\", completedOffset / completed.length);\r\n\t\t// }\r\n\r\n\t\t// Read stretched samples into our output array\r\n\t\tcompletedOffset += kali.output(\r\n\t\t\tcompleted.subarray(\r\n\t\t\t\tcompletedOffset,\r\n\t\t\t\tMath.min(completedOffset + bufsize, completed.length),\r\n\t\t\t),\r\n\t\t);\r\n\r\n\t\tif (inputOffset < inputData.length) {\r\n\t\t\t// If we have more data to write, write it\r\n\t\t\tvar dataToInput = inputData.subarray(\r\n\t\t\t\tinputOffset,\r\n\t\t\t\tMath.min(inputOffset + bufsize, inputData.length),\r\n\t\t\t);\r\n\t\t\tinputOffset += dataToInput.length;\r\n\r\n\t\t\t// Feed Kali samples\r\n\t\t\tkali.input(dataToInput);\r\n\t\t\tkali.process();\r\n\t\t} else if (!flushed) {\r\n\t\t\t// Flush if we haven't already\r\n\t\t\tkali.flush();\r\n\t\t\tflushed = true;\r\n\t\t}\r\n\r\n\t\tloopCount++;\r\n\t}\r\n\r\n\tconsole.log(\"Finished stretching for rate: \", stretchFactor);\r\n\treturn completed;\r\n}\r\n\r\nonmessage = (event) => {\r\n\tconsole.log(\"Start stretching in parallel\", event.data.stretchFactor);\r\n\tpostMessage({\r\n\t\tdata: doStretch(event.data.data, event.data.stretchFactor, event.data.rate),\r\n\t});\r\n};\r\n"],"names":["TypedQueue","c","n","idx","newbuf","data","offset","start","end","handleInt","tempo_t","Kali","channels","a","b","length","diff","i","t","new_win","f","j","best_pos","prev_best_pos","step","least_diff","k","in1","in2","output","fade_step","fade_in","fade_out","skip","numToCopy","samples","samples_out","remaining","buff","sample_rate","factor","quick_search","segment_ms","search_ms","overlap_ms","profile","max_skip","new_overlap","doStretch","inputData","stretchFactor","rate","numChannels","numInputFrames","bufsize","kali","completed","inputOffset","completedOffset","flushed","dataToInput","event"],"mappings":"yBAoBA,IAAIA,EAA4B,UAAY,CACxC,SAASA,EAAWC,EAAG,CACnB,KAAK,MAAQ,EACb,KAAK,IAAM,EACX,KAAK,sBAAwBA,EAC7B,KAAK,OAAS,IAAIA,EAAE,KAAK,CAC7B,CACA,OAAAD,EAAW,UAAU,MAAQ,UAAY,CACrC,KAAK,MAAQ,KAAK,IAAM,CAC5B,EACAA,EAAW,UAAU,QAAU,SAAUE,EAAG,CAIxC,IAHI,KAAK,OAAS,KAAK,KACnB,KAAK,MAAK,IAEJ,CAEN,GAAI,KAAK,IAAMA,EAAI,KAAK,OAAO,OAAQ,CACnC,IAAIC,EAAM,KAAK,IACf,YAAK,KAAOD,EACLC,CACX,CAEA,GAAI,KAAK,MAAQ,MAAO,CACpB,KAAK,OAAO,IAAI,KAAK,OAAO,SAAS,KAAK,MAAO,KAAK,GAAG,CAAC,EAC1D,KAAK,KAAO,KAAK,MACjB,KAAK,MAAQ,EACb,QACJ,CAEA,IAAIC,EAAS,IAAI,KAAK,sBAAsB,KAAK,OAAO,OAASF,CAAC,EAClEE,EAAO,IAAI,KAAK,MAAM,EACtB,KAAK,OAASA,CAClB,CACJ,EACAJ,EAAW,UAAU,MAAQ,SAAUK,EAAMH,EAAG,CAC5C,IAAII,EAAS,KAAK,QAAQJ,CAAC,EAC3B,KAAK,OAAO,IAAIG,EAAK,SAAS,EAAGH,CAAC,EAAGI,CAAM,CAC/C,EACAN,EAAW,UAAU,UAAY,SAAUE,EAAG,CAC1C,IAAII,EAAS,KAAK,QAAQJ,CAAC,EAC3B,OAAO,KAAK,OAAO,SAASI,EAAQA,EAASJ,CAAC,CAClD,EACAF,EAAW,UAAU,KAAO,SAAUK,EAAMH,EAAG,CACvCA,EAAI,KAAK,MAAQ,KAAK,KACtB,QAAQ,MAAM,qBAAsBA,EAAG,KAAK,IAAK,KAAK,KAAK,EAE3DG,GAAQ,MACRA,EAAK,IAAI,KAAK,OAAO,SAAS,KAAK,MAAO,KAAK,MAAQH,CAAC,CAAC,EAE7D,KAAK,OAASA,CAClB,EACAF,EAAW,UAAU,SAAW,SAAUO,EAAOC,EAAK,CAClD,OAAIA,IAAQ,SAAUA,EAAM,IACxBA,EAAM,KAAK,aACX,QAAQ,MAAM,6BAA8BA,CAAG,EAE/CA,EAAM,IACNA,EAAM,KAAK,aAER,KAAK,OAAO,SAAS,KAAK,MAAQD,EAAO,KAAK,MAAQC,CAAG,CACpE,EACAR,EAAW,UAAU,UAAY,UAAY,CACzC,OAAO,KAAK,IAAM,KAAK,KAC3B,EACOA,CACX,IC7DA,SAASS,EAAU,EAAG,CAClB,OAAO,KAAK,MAAM,CAAC,CACvB,CACA,IAAIC,EAAyB,UAAY,CACrC,SAASA,GAAU,CACf,KAAK,eAAiB,GACtB,KAAK,YAAc,MACnB,KAAK,SAAW,EAChB,KAAK,aAAe,GACpB,KAAK,OAAS,EACd,KAAK,OAAS,EACd,KAAK,QAAU,EACf,KAAK,QAAU,EACf,KAAK,aAAe,EAEpB,KAAK,WAAa,EAClB,KAAK,YAAc,EACnB,KAAK,eAAiB,EACtB,KAAK,WAAa,CACtB,CACA,OAAOA,CACX,EAAC,EACGC,EAAsB,UAAY,CAClC,SAASA,EAAKC,EAAU,CACpB,IAAI,EAAI,IAAIF,EACZ,EAAE,SAAWE,EACb,EAAE,WAAa,IAAIZ,EAAW,YAAY,EAC1C,EAAE,YAAc,IAAIA,EAAW,YAAY,EAC3C,KAAK,EAAI,CACb,CAGA,OAAAW,EAAK,UAAU,WAAa,SAAUE,EAAGC,EAAGC,EAAQ,CAGhD,QAFIC,EAAO,EACPC,EAAI,EACCA,EAAI,EAAGA,EAAIF,EAAQE,IACxBD,GAAQ,KAAK,IAAIH,EAAEI,CAAC,EAAIH,EAAEG,CAAC,EAAG,CAAC,EAEnC,OAAOD,CACX,EAEAL,EAAK,UAAU,4BAA8B,SAAUO,EAAGC,EAAS,CAC/D,IAAIC,EAAIF,EAAE,YACNG,EACAC,EAEAC,EAAiBL,EAAE,OAAS,IAAO,EACnCM,EAAO,GACPP,EAAIK,EAAWJ,EAAE,aAAeK,EAAgB,EAChDP,EACAS,EAAa,KAAK,WAAWN,EAAQ,SAASD,EAAE,SAAWD,CAAC,EAAGG,EAAGF,EAAE,SAAWA,EAAE,OAAO,EACxFQ,EAAI,EAER,GAAIR,EAAE,aACF,EAAG,CACC,IAAKQ,EAAI,GAAIA,GAAK,EAAGA,GAAK,EACtB,IAAKL,EAAI,GAAGA,EAAI,GAAKG,GAAQ,MACzBP,EAAIM,EAAgBG,EAAIL,EAAIG,EACxB,EAAAP,EAAI,GAAKA,GAAKC,EAAE,SAFSG,IAK7BL,EAAO,KAAK,WAAWG,EAAQ,SAASD,EAAE,SAAWD,CAAC,EAAGG,EAAGF,EAAE,SAAWA,EAAE,OAAO,EAC9EF,EAAOS,IACPA,EAAaT,EACbM,EAAWL,GAIvBM,EAAgBD,CACpB,OAASE,KAAU,OAGnB,KAAKP,EAAI,EAAGA,EAAIC,EAAE,OAAQD,IACtBD,EAAO,KAAK,WAAWG,EAAQ,SAASD,EAAE,SAAWD,CAAC,EAAGG,EAAGF,EAAE,SAAWA,EAAE,OAAO,EAC9EF,EAAOS,IACPA,EAAaT,EACbM,EAAWL,GAIvB,OAAOK,CACX,EACAX,EAAK,UAAU,cAAgB,SAAUO,EAAGS,EAAKC,EAAKC,EAAQ,CAC1D,IAAIZ,EAAI,EACJI,EAAI,EACJK,EAAI,EACJI,EAAY,EAAMZ,EAAE,QACxB,IAAKD,EAAI,EAAGA,EAAIC,EAAE,QAASD,IAAK,CAC5B,IAAIc,EAAUD,EAAYb,EACtBe,EAAW,EAAMD,EACrB,IAAKV,EAAI,EAAGA,EAAIH,EAAE,SAAUG,IAAKK,IAC7BG,EAAOH,CAAC,EAAIC,EAAID,CAAC,EAAIM,EAAWJ,EAAIF,CAAC,EAAIK,CAEjD,CACJ,EACApB,EAAK,UAAU,QAAU,UAAY,CAEjC,QADIO,EAAI,KAAK,EACNA,EAAE,WAAW,UAAS,GAAMA,EAAE,cAAc,CAC/C,IAAIe,EACA3B,EAECY,EAAE,gBAKHZ,EAAS,KAAK,4BAA4BY,EAAGA,EAAE,WAAW,SAAS,CAAC,CAAC,EACrE,KAAK,cAAcA,EAAGA,EAAE,YAAaA,EAAE,WAAW,SAASA,EAAE,SAAWZ,CAAM,EAAGY,EAAE,YAAY,UAAUA,EAAE,OAAO,CAAC,IALnHZ,EAASY,EAAE,OAAS,EACpBA,EAAE,YAAY,MAAMA,EAAE,WAAW,SAASA,EAAE,SAAWZ,EAAQY,EAAE,OAAO,EAAGA,EAAE,OAAO,GAOxFA,EAAE,YAAY,MAAMA,EAAE,WAAW,SAASA,EAAE,UAAYZ,EAASY,EAAE,QAAQ,EAAGA,EAAE,QAAU,EAAIA,EAAE,OAAO,EAGvG,IAAIgB,EAAYhB,EAAE,SAAWA,EAAE,QAC/BA,EAAE,YAAY,IAAIA,EAAE,WAAW,SAASA,EAAE,UAAYZ,EAASY,EAAE,QAAUA,EAAE,QAAQ,EAAE,SAAS,EAAGgB,CAAS,CAAC,EAE7GhB,EAAE,iBACFe,EAAOxB,EAAUS,EAAE,QAAUA,EAAE,QAAUA,EAAE,SAAW,EAAG,EACzDA,EAAE,WAAW,KAAK,KAAMe,CAAI,CAChC,CACJ,EACAtB,EAAK,UAAU,MAAQ,SAAUwB,EAASjC,EAAGI,EAAQ,CAC7CJ,IAAM,SAAUA,EAAI,MAEpBA,GAAK,OACLA,EAAIiC,EAAQ,QAEhB,IAAIjB,EAAI,KAAK,EACbA,EAAE,YAAchB,EAChBgB,EAAE,WAAW,MAAMiB,EAASjC,CAAC,CACjC,EACAS,EAAK,UAAU,OAAS,SAAUwB,EAAS,CACvC,IAAI,EAAI,KAAK,EACTjC,EAAI,KAAK,IAAIiC,EAAQ,OAAQ,EAAE,YAAY,UAAS,CAAE,EAC1D,SAAE,aAAejC,EACjB,EAAE,YAAY,KAAKiC,EAASjC,CAAC,EACtBA,CACX,EACAS,EAAK,UAAU,MAAQ,UAAY,CAC/B,IAAIO,EAAI,KAAK,EACTkB,EAAc3B,EAAUS,EAAE,WAAaA,EAAE,OAAS,EAAG,EACrDmB,EAAYD,EAAclB,EAAE,YAAekB,EAAclB,EAAE,YAAe,EAC1EoB,EAAO,IAAI,aAAa,IAAMpB,EAAE,QAAQ,EAC5C,GAAImB,EAAY,EAAG,CACf,KAAOnB,EAAE,YAAY,UAAS,EAAKmB,GAC/B,KAAK,MAAMC,EAAM,GAAG,EACpB,KAAK,QAAO,EAIhBpB,EAAE,WAAa,CACnB,CACJ,EACAP,EAAK,UAAU,MAAQ,SAAU4B,EAAaC,EAC9CC,EAAcC,EAAYC,EAAWC,EAAY,CACzCH,IAAiB,SAAUA,EAAe,IAC1CC,IAAe,SAAUA,EAAa,MACtCC,IAAc,SAAUA,EAAY,MACpCC,IAAe,SAAUA,EAAa,MAC1C,IAAIC,EAAU,EACV3B,EAAI,KAAK,EACbA,EAAE,YAAcqB,EACZG,GAAc,OACdA,EAAa,KAAK,IAAI,GAAI/B,EAAK,YAAYkC,CAAO,EAAI,KAAK,IAAI,KAAK,IAAIL,EAAQ7B,EAAK,aAAakC,CAAO,CAAC,EAAG,CAAC,CAAC,GAE/GF,GAAa,OACbA,EAAYD,EAAa/B,EAAK,aAAakC,CAAO,GAElDD,GAAc,OACdA,EAAaF,EAAa/B,EAAK,aAAakC,CAAO,GAEvD,IAAIC,EASJ,GARA5B,EAAE,aAAeuB,EACjBvB,EAAE,OAASsB,EACXtB,EAAE,QAAUT,EAAU8B,EAAcG,EAAa,IAAO,EAAE,EAC1DxB,EAAE,OAAST,EAAU8B,EAAcI,EAAY,IAAO,EAAE,EACxDzB,EAAE,QAAU,KAAK,IAAIT,EAAU8B,EAAcK,EAAa,IAAO,GAAG,EAAG,EAAE,EACrE1B,EAAE,QAAU,EAAIA,EAAE,UAClBA,EAAE,SAAW,GAEb,CAACA,EAAE,eACHA,EAAE,YAAc,IAAI,aAAaA,EAAE,QAAUA,EAAE,QAAQ,MAEtD,CACD,IAAI6B,EAAc,IAAI,aAAa7B,EAAE,QAAUA,EAAE,QAAQ,EACrDX,EAAQ,EACRW,EAAE,QAAUA,EAAE,SAAWA,EAAE,YAAY,SACvCX,EAAQW,EAAE,YAAY,OAAUA,EAAE,QAAUA,EAAE,UAElD6B,EAAY,IAAI7B,EAAE,YAAY,SAASX,EAAOW,EAAE,YAAY,MAAM,CAAC,EACnEA,EAAE,YAAc6B,CACpB,CACAD,EAAWrC,EAAU,KAAK,KAAK+B,GAAUtB,EAAE,QAAUA,EAAE,QAAQ,CAAC,EAChEA,EAAE,aAAe,KAAK,IAAI4B,EAAW5B,EAAE,QAASA,EAAE,OAAO,EAAIA,EAAE,OAC1DA,EAAE,gBACHA,EAAE,WAAW,QAAQT,EAAUS,EAAE,OAAS,CAAC,CAAC,EAEhDA,EAAE,eAAiB,EACvB,EACAP,EAAK,UAAU,SAAW,SAAU6B,EAAQ,CACxC,IAAI,EAAI,KAAK,EACb,KAAK,MAAM,EAAE,YAAaA,EAAQ,EAAE,YAAY,CACpD,EACA7B,EAAK,YAAc,CAAC,GAAI,GAAI,GAAI,EAAE,EAClCA,EAAK,aAAe,CAAC,EAAG,EAAG,IAAK,CAAC,EACjCA,EAAK,aAAe,CAAC,MAAO,EAAG,IAAK,CAAC,EACrCA,EAAK,aAAe,CAAC,MAAO,EAAG,KAAM,CAAC,EAC/BA,CACX,ICvOA,SAASqC,EAAUC,EAAWC,EAAeC,EAAMC,EAAc,EAAG,CACnE,IAAIC,EAAiBJ,EAAU,OAASG,EACpCE,EAAU,KAAOF,EAGjBG,EAAO,IAAI5C,EAAKyC,CAAW,EAC/BG,EAAK,MAAMJ,EAAMD,EAAe,EAAK,EAYrC,QATIM,EAAY,IAAI,aACnB,KAAK,MAAOH,EAAiBH,EAAiBE,EAAc,CAAC,CAC/D,EAEKK,EAAc,EACdC,EAAkB,EAElBC,EAAU,GAEPD,EAAkBF,EAAU,QAalC,GAPAE,GAAmBH,EAAK,OACvBC,EAAU,SACTE,EACA,KAAK,IAAIA,EAAkBJ,EAASE,EAAU,MAAM,CACxD,CACA,EAEMC,EAAcR,EAAU,OAAQ,CAEnC,IAAIW,EAAcX,EAAU,SAC3BQ,EACA,KAAK,IAAIA,EAAcH,EAASL,EAAU,MAAM,CACpD,EACGQ,GAAeG,EAAY,OAG3BL,EAAK,MAAMK,CAAW,EACtBL,EAAK,QAAO,CACb,MAAYI,IAEXJ,EAAK,MAAK,EACVI,EAAU,IAMZ,eAAQ,IAAI,iCAAkCT,CAAa,EACpDM,CACR,CAEA,UAAaK,GAAU,CACtB,QAAQ,IAAI,+BAAgCA,EAAM,KAAK,aAAa,EACpE,YAAY,CACX,KAAMb,EAAUa,EAAM,KAAK,KAAMA,EAAM,KAAK,cAAeA,EAAM,KAAK,IAAI,CAC5E,CAAE,CACF"}