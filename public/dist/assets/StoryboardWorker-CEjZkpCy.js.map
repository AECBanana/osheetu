{"version":3,"file":"StoryboardWorker-CEjZkpCy.js","sources":["../scripts/Workers/StoryboardWorker.js"],"sourcesContent":["function Clamp(val, from, to) {\r\n    return Math.max(Math.min(val, to), from);\r\n}\r\n\r\nfunction binarySearch(list, value, compareFunc) {\r\n    let start = 0;\r\n    let end = list.length - 1;\r\n\r\n    while (end >= start) {\r\n        const mid = start + Math.floor((end - start) / 2);\r\n\r\n        if (compareFunc(list[mid], value) === 0) return mid;\r\n\r\n        if (compareFunc(list[mid], value) < 0) {\r\n            start = mid + 1;\r\n            continue;\r\n        }\r\n\r\n        if (compareFunc(list[mid], value) > 0) {\r\n            end = mid - 1;\r\n        }\r\n    }\r\n\r\n    return -1;\r\n}\r\n\r\nfunction binarySearchNearest(list, value, compareFunc) {\r\n    let start = 0;\r\n    let end = list.length - 1;\r\n    let mid = start + Math.floor((end - start) / 2);\r\n\r\n    while (end >= start) {\r\n        mid = start + Math.floor((end - start) / 2);\r\n\r\n        if (compareFunc(list[mid], value) === 0) return mid;\r\n\r\n        if (compareFunc(list[mid], value) < 0) {\r\n            start = mid + 1;\r\n            continue;\r\n        }\r\n\r\n        if (compareFunc(list[mid], value) > 0) {\r\n            end = mid - 1;\r\n        }\r\n    }\r\n\r\n    return mid;\r\n}\r\n\r\nclass Timer {\r\n    static isPlaying = false;\r\n    static _currentTime = 1;\r\n    static absStartTime = 0;\r\n    static lastTime = 0;\r\n    static playbackRate = 1;\r\n\r\n    static objectsByStart = [];\r\n    static objectsByEnd = [];\r\n    static filtered = [];\r\n\r\n    static get currentTime() {\r\n        return Timer._currentTime;\r\n    }\r\n\r\n    static set currentTime(val) {\r\n        Timer._currentTime = val;\r\n        // Timer.getObjects(true);\r\n    }\r\n\r\n    static moddedStats = {\r\n        approachRate: 5,\r\n        circleSize: 5,\r\n        HPDrainRate: 5,\r\n        overallDifficulty: 5,\r\n        stackLeniency: 7,\r\n        circleDiameter: (2 * (54.4 - 4.48 * 5) * 236) / 256,\r\n        preempt: 1200,\r\n        fadeIn: 800,\r\n        sliderTickRate: 1,\r\n        radius: 54.4 - 4.48 * 5,\r\n        stackOffset: (-6.4 * (1 - (0.7 * (5 - 5)) / 5)) / 2,\r\n    };\r\n\r\n    static mods = {\r\n        HR: false,\r\n        EZ: false,\r\n    };\r\n\r\n    static getCurrentTime() {\r\n        if (!this.isPlaying) return this.currentTime + (Timer.mods.DT ? -40 : 0);\r\n        return this.currentTime + (performance.now() - this.absStartTime) * Timer.playbackRate + (Timer.mods.DT ? -40 : 0);\r\n    }\r\n\r\n    static getObjects(bySeek = false) {\r\n        const currentTime = this.getCurrentTime();\r\n\r\n        const compareFunc = (element, value) => {\r\n            if (element.endTime + 100 < value) return -1;\r\n            if (element.startTime - 100 > value) return 1;\r\n            return 0;\r\n        };\r\n\r\n        const drawList = this.objectsByEnd.filter((object) => compareFunc(object, currentTime) === 0);\r\n        // const drawSet = {};\r\n        // const foundIndexByEnd = binarySearchNearest(this.objectsByEnd, currentTime, compareFunc);\r\n        // const foundIndexByStart = binarySearchNearest(this.objectsByStart, currentTime, compareFunc);\r\n\r\n        // if (foundIndexByEnd === -1 && foundIndexByStart === -1)\r\n        //     return {\r\n        //         removed: [],\r\n        //         addBack: [],\r\n        //         addTop: [],\r\n        //         filtered: [],\r\n        //     };\r\n\r\n        // // if (\r\n        // //     compareFunc(this.objectsByEnd[foundIndexByEnd], currentTime) !== 0 &&\r\n        // //     compareFunc(this.objectsByStart[foundIndexByStart], currentTime) !== 0\r\n        // // )\r\n        // //     return {\r\n        // //         removed: [],\r\n        // //         addBack: [],\r\n        // //         addTop: [],\r\n        // //         filtered: [],\r\n        // //     };\r\n\r\n        // console.log(this.objectsByEnd, this.objectsByStart)\r\n        // console.log(foundIndexByEnd, foundIndexByStart, this.objectsByEnd[foundIndexByEnd], this.objectsByStart[foundIndexByStart])\r\n\r\n        // if (foundIndexByEnd !== -1) {\r\n        //     let start = foundIndexByEnd - 1;\r\n        //     let end = foundIndexByEnd + 1;\r\n\r\n        //     while (start >= 0 && compareFunc(this.objectsByEnd[start], currentTime) === 0) {\r\n        //         if (!drawSet[this.objectsByEnd[start].idx]) {\r\n        //             drawSet[this.objectsByEnd[start].idx] = this.objectsByEnd[start];\r\n        //         }\r\n        //         start--;\r\n        //     }\r\n\r\n        //     while (end <= this.objectsByEnd[end] && compareFunc(this.objectsByEnd[end], currentTime) === 0) {\r\n        //         if (!drawSet[this.objectsByEnd[end].idx]) {\r\n        //             drawSet[this.objectsByEnd[end].idx] = this.objectsByEnd[end];\r\n        //         }\r\n        //         end++;\r\n        //     }\r\n        //     console.log(start, end);\r\n\r\n        //     if (!drawSet[this.objectsByEnd[foundIndexByEnd].idx] && compareFunc(this.objectsByEnd[foundIndexByEnd], currentTime) === 0)\r\n        //         drawSet[this.objectsByEnd[foundIndexByEnd].idx] = this.objectsByEnd[foundIndexByEnd];\r\n        // }\r\n        // console.log(drawSet);\r\n\r\n        // if (foundIndexByStart !== -1) {\r\n        //     let start = foundIndexByStart - 1;\r\n        //     let end = foundIndexByStart + 1;\r\n\r\n        //     while (start >= 0 && compareFunc(this.objectsByStart[start], currentTime) === 0) {\r\n        //         if (!drawSet[this.objectsByStart[start].idx]) {\r\n        //             drawSet[this.objectsByStart[start].idx] = this.objectsByStart[start];\r\n        //         }\r\n        //         start--;\r\n        //     }\r\n\r\n        //     while (end <= this.objectsByStart.length && compareFunc(this.objectsByStart[end], currentTime) === 0) {\r\n        //         if (!drawSet[this.objectsByStart[end].idx]) {\r\n        //             drawSet[this.objectsByStart[end].idx] = this.objectsByStart[end];\r\n        //         }\r\n        //         end++;\r\n        //     }\r\n        //     console.log(start, compareFunc(this.objectsByStart[start], currentTime), this.objectsByStart[start], end);\r\n\r\n        //     if (!drawSet[this.objectsByStart[foundIndexByStart].idx] && compareFunc(this.objectsByStart[foundIndexByStart], currentTime) === 0)\r\n        //         drawSet[this.objectsByStart[foundIndexByStart].idx] = this.objectsByStart[foundIndexByStart];\r\n        // }\r\n        // console.log(drawSet);\r\n\r\n        // drawList.push(...Object.values(drawSet));\r\n        drawList.sort((a, b) => a.idx - b.idx);\r\n\r\n        const removed = [];\r\n        this.filtered.forEach((object) => {\r\n            if (drawList.length > 0) {\r\n                if (compareFunc(object, currentTime) === 0) return;\r\n            }\r\n            removed.push(object);\r\n        });\r\n\r\n        // const addTop = [];\r\n        // const addBack = [];\r\n\r\n        // if (this.filtered.length > 0) {\r\n        //     drawList.forEach((object) => {\r\n        //         if (object.idx < this.filtered.at(0).idx) addBack.push(object);\r\n        //         if (object.idx > this.filtered.at(-1).idx) addTop.push(object);\r\n        //     });\r\n        // } else {\r\n        //     addTop.push(...drawList);\r\n        // }\r\n\r\n        const add = [];\r\n        drawList.forEach((object) => {\r\n            if (this.filtered.length > 0 && this.filtered.includes(object)) return;\r\n            add.push(object);\r\n        });\r\n\r\n        // if (bySeek) console.log(removed, addTop, addBack, drawList, structuredClone(this.filtered));\r\n        this.filtered = [...drawList];\r\n\r\n        // if (removed.length > 0 || addTop.length > 0 || addBack.length > 0) {\r\n        //     console.log(drawSet);\r\n        //     console.log(foundIndexByEnd, foundIndexByStart);\r\n        //     console.log(\r\n        //         drawList\r\n        //             .map((sprite) => `${sprite.texturepath} - ${sprite.startTime} - ${sprite.endTime} - ${compareFunc(sprite, currentTime)}`)\r\n        //             .join(\"\\n\")\r\n        //     );\r\n        // }\r\n\r\n        return {\r\n            removed,\r\n            // addTop,\r\n            // addBack,\r\n            add,\r\n            filtered: this.filtered,\r\n        };\r\n    }\r\n\r\n    static loop() {\r\n        this._renderStart = performance.now();\r\n\r\n        if (this.objectsByStart.length > 0 && this.objectsByEnd.length > 0) {\r\n            const objs = this.getObjects();\r\n            const currentTime = this.getCurrentTime();\r\n\r\n            postMessage({\r\n                type: \"updateOrder\",\r\n                objects: {\r\n                    ...objs,\r\n                    // current\r\n                },\r\n                currentTime,\r\n                lastTime: this.lastTime,\r\n            });\r\n\r\n            this.lastTime = currentTime;\r\n        }\r\n    }\r\n}\r\n\r\nonmessage = (event) => {\r\n    if (event.data.type === \"start\") {\r\n        Timer.isPlaying = true;\r\n        Timer.absStartTime = performance.now();\r\n    }\r\n\r\n    if (event.data.type === \"stop\") {\r\n        Timer.isPlaying = false;\r\n        Timer.currentTime += (performance.now() - Timer.absStartTime) * Timer.playbackRate;\r\n    }\r\n\r\n    if (event.data.type === \"seek\") {\r\n        const { time } = event.data;\r\n        Timer.currentTime = time;\r\n    }\r\n\r\n    if (event.data.type === \"objects\") {\r\n        const { objects } = event.data;\r\n        Timer.objectsByStart = objects.toSorted((a, b) => {\r\n            return a.startTime - b.startTime;\r\n        });\r\n        Timer.objectsByEnd = objects.toSorted((a, b) => {\r\n            return a.endTime - b.endTime;\r\n        });\r\n        console.log(Timer.objectsByStart, Timer.objectsByEnd);\r\n    }\r\n\r\n    if (event.data.type === \"updateStats\") {\r\n        const { mods, moddedStats, playbackRate } = event.data;\r\n        Timer.mods = mods;\r\n        Timer.moddedStats = moddedStats;\r\n        Timer.playbackRate = playbackRate;\r\n    }\r\n\r\n    if (event.data.type === \"clear\") {\r\n        Timer.objectsByStart = [];\r\n        Timer.objectsByEnd = [];\r\n        Timer.filtered = [];\r\n\r\n        Timer.isPlaying = false;\r\n        Timer.currentTime = 1;\r\n        Timer.lastTime = 0;\r\n    }\r\n};\r\n\r\nsetInterval(() => Timer.loop(), 0);\r\n"],"names":["_Timer","val","bySeek","currentTime","compareFunc","element","value","drawList","object","b","removed","add","objs","__publicField","Timer","event","time","objects","a","mods","moddedStats","playbackRate"],"mappings":"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"}